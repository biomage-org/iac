name: Load Deployment Config

on:
  workflow_dispatch:
    inputs:
      environment:
        type: string
        description: "Environment for validation (leave blank to skip validation)"
        required: false

  workflow_call:
    inputs:
      environment:
        type: string
        description: "Environment for validation (leave blank to skip validation)"
        required: false
    outputs:
      environment_names:
        description: "The names of all environments"
        value: ${{ jobs.setup.outputs.environment_names }}
      image_account_id:
        description: "Account ID that the docker images are stored in"
        value: ${{ jobs.setup.outputs.image_account_id }}
      image_account_region:
        description: "Account region that the docker images are stored in"
        value: ${{ jobs.setup.outputs.image_account_region }}
      domain_name:
        description: "The Domain name of the organisation"
        value: ${{ jobs.setup.outputs.domain_name }}
      support_email:
        description: "The support email"
        value: ${{ jobs.setup.outputs.support_email }}
      reply_email:
        description: "The reploy email"
        value: ${{ jobs.setup.outputs.reply_email }}
      deployment_matrix:
        description: "All allowed combinations of environment name and environment type"
        value: ${{ jobs.setup.outputs.deployment_matrix }}

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      environment_names: ${{ steps.load_variables.outputs.environment_names }}
      image_account_id: ${{ steps.load_variables.outputs.image_account_id }}
      image_account_region: ${{ steps.load_variables.outputs.image_account_region }}
      domain_name: ${{ steps.load_variables.outputs.domain_name }}
      support_email: ${{ steps.load_variables.outputs.support_email }}
      reply_email: ${{ steps.load_variables.outputs.reply_email }}
      deployment_matrix: ${{ steps.generate_deployment_matrix.outputs.deployment_matrix }}

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with: ###########  REMOVE THIS WHEN MERGING IN MASTER
        ref: hms-merge #####################################

    - id: load_variables
      name: Load variables
      run: |
        CONFIG_FILE=$(cat deployment-config.json | jq .)
        ENVIRONMENT_NAMES=$(echo $CONFIG_FILE | jq -c --arg org "${{ github.repository_owner }}" '.[$org].environment_names')
        IMAGE_ACCOUNT_ID=$(echo $CONFIG_FILE | jq -r --arg org "${{ github.repository_owner }}" '.[$org].docker_image_account.id')
        IMAGE_ACCOUNT_REGION=$(echo $CONFIG_FILE | jq -r --arg org "${{ github.repository_owner }}" '.[$org].docker_image_account.region')
        DOMAIN_NAME=$(echo $CONFIG_FILE | jq -r --arg org "${{ github.repository_owner }}" '.[$org].domain_name')
        SUPPORT_EMAIL=$(echo $CONFIG_FILE | jq -r --arg org "${{ github.repository_owner }}" '.[$org].support_email')
        REPLY_EMAIL=$(echo $CONFIG_FILE | jq -r --arg org "${{ github.repository_owner }}" '.[$org].reply_email')

        echo "environment_names=$ENVIRONMENT_NAMES" >> $GITHUB_OUTPUT
        echo "environment_names=$ENVIRONMENT_NAMES"
        echo "image_account_id=$IMAGE_ACCOUNT_ID" >> $GITHUB_OUTPUT
        echo "image_account_id=$IMAGE_ACCOUNT_ID"
        echo "image_account_region=$IMAGE_ACCOUNT_REGION" >> $GITHUB_OUTPUT
        echo "image_account_region=$IMAGE_ACCOUNT_REGION"
        echo "domain_name=$DOMAIN_NAME" >> $GITHUB_OUTPUT
        echo "domain_name=$DOMAIN_NAME"
        echo "support_email=$SUPPORT_EMAIL" >> $GITHUB_OUTPUT
        echo "support_email=$SUPPORT_EMAIL"
        echo "reply_email=$REPLY_EMAIL" >> $GITHUB_OUTPUT
        echo "reply_email=$REPLY_EMAIL"

    - name: Generate deployment matrix
      id: generate_deployment_matrix
      run: |
        CONFIG_FILE=$(cat deployment-config.json | jq .)

        DEPLOYMENT_MATRIX=$(echo $CONFIG_FILE | jq -c '
        [
          to_entries[] |
          .value.deployment_environments |
          to_entries[] |
          {
            name: .key,
            type: .value[]
          }
        ]')
        echo ${DEPLOYMENT_MATRIX}
        echo "deployment_matrix=$DEPLOYMENT_MATRIX" >> $GITHUB_OUTPUT

      shell: bash

  validate-environment-name:
    name: Validate selected option
    needs: setup
    if: ${{ github.event.inputs.environment != '' }}
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with: ###########  REMOVE THIS WHEN MERGING IN MASTER
          ref: hms-merge #####################################
      - name: Validate input against config
        run: |
          valid_options_json=$(echo '${{ needs.setup.outputs.environment_names }}' | jq '. += ["all"]')
          valid_options=($(echo $valid_options_json | jq -r '.[]'))

          if [[ " ${valid_options[@]} " =~ " ${{ github.event.inputs.environment }} " ]]; then
            echo "Valid option selected"
            exit 0
          else
            echo "Invalid option selected"
            exit 1
          fi