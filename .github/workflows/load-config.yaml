name: Setup Variables

on:
  workflow_dispatch:
    inputs:
      environment:
        type: string
        description: "Environment for validation (leave blank to skip validation)"
        required: false

  workflow_call:
    inputs:
      environment:
        type: string
        description: "Environment for validation (leave blank to skip validation)"
        required: false
    outputs:
      image_account_id:
        description: "Account ID that the docker images are stored in"
        value: ${{ jobs.setup.outputs.image_account_id }}

      environment_names:
        description: "The names of all environments"
        value: ${{ jobs.setup.outputs.environment_names }}
jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      image_account_id: ${{ steps.load_variables.outputs.image_account_id }}
      environment_names: ${{ steps.load_variables.outputs.environment_names }}

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with: ###########  REMOVE THIS WHEN MERGING IN MASTER
        ref: hms-merge #####################################

    - id: load_variables
      name: Load variables
      run: |
        CONFIG_FILE=$(cat deployment-config.json | jq .)

        IMAGE_ACCOUNT_ID=$(echo $CONFIG_FILE | jq -r --arg org "${{ github.repository_owner }}" '.[$org].pipeline_account_id')
        ENVIRONMENT_NAMES=$(echo $CONFIG_FILE | jq -r --arg org "${{ github.repository_owner }}" '.[$org].environment_names | join(","))

        echo "image_account_id=$IMAGE_ACCOUNT_ID" >> $GITHUB_OUTPUT
        echo "image_account_id=$IMAGE_ACCOUNT_ID"
        echo "environment_names=$ENVIRONMENT_NAMES" >> $GITHUB_OUTPUT
        echo "environment_names=$ENVIRONMENT_NAMES"

  validate-option:
    name: Validate selected option
    needs: setup
    if: ${{ github.event.inputs.environment != '' }}
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with: ###########  REMOVE THIS WHEN MERGING IN MASTER
          ref: hms-merge #####################################
      - name: Validate input against config
        run: |
          IFS=',' read -ra valid_options <<< "${{ needs.setup.outputs.environment_names }}"
          for i in "${valid_options[@]}"; do
            if [[ "${{ github.event.inputs.environment }}" == "$i" ]] || [[ "${{ github.event.inputs.environment }}" == "all" ]]; then
              echo "Valid option selected"
              exit 0
            fi
          done
          echo "Invalid option selected"
          exit 1

  output-option:
    name: Output selected option
    needs: validate-option
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Show which option was selected
        run: echo "The option selected was ${{ github.event.inputs.environment_name }} in ${{ github.event.inputs.environment_type }}"